<?php

/**
 * @file
 * Makes text-data in fields unreadable.
 */


/**
 * Implementation of hook_menu().
 */
function shredder_menu() {
  $items = array();

  $items['admin/config/content/shredder'] = array(
    'title' => 'Data shredder',
    'page callback' => 'shredder_form',
    'access arguments' => array('use data shredder'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function shredder_permission() {
  return array(
    'use data shredder' => array(
      'title' => t('Use Data Shredder'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Page callback for admin/config/content/shredder.
 */
function shredder_form($step = NULL) {
  $form_info = array(
    'id' => 'erpal-shredder-form',
    'path' => "admin/config/content/shredder/%step",
    'show trail' => TRUE,
    'show back' => TRUE,
    'show return' => FALSE,
    'next callback' =>  'shredder_wizard_next',
    'finish callback' => 'shredder_wizard_finish',
    'order' => array(
      'step1' => t('Select Entity types'),
      'step2' => t('Select Bundles'),
      'step3' => t('Select Field types'),
      'step4' => t('Select Fields'),
      'step5' => t('Shredder data'),
    ),
    'forms' => array(
      'step1' => array(
        'form id' => 'shredder_step_1'
      ),
      'step2' => array(
        'form id' => 'shredder_step_2'
      ),
      'step3' => array(
        'form id' => 'shredder_step_3'
      ),
      'step4' => array(
        'form id' => 'shredder_step_4'
      ),
      'step5' => array(
        'form id' => 'shredder_step_5'
      ),
    ),
  );

  // Object caching.
  $object_id = 'shredder';
  if (empty($step)) {
    shredder_cache_clear($object_id);
  }

  $object = shredder_cache_get($object_id);
  $form_state = array(
    'object_id' => $object_id,
    'object' => &$object,
  );

  ctools_include('wizard');
  $form = ctools_wizard_multistep_form($form_info, $step, $form_state);
  $output = drupal_render($form);

  return $output;
}

/**
 * Select entity types.
 */
function shredder_step_1($form, &$form_state) {
  $number_of_rows = db_select('shredder_changed_entities')->range(0, 1)->countQuery()->execute()->fetchField();
  if ($number_of_rows > 0) {
    $form['clear'] = array(
      '#type' => 'submit',
      '#value' => t('Clear results table'),
      '#limit_validation_errors' => array(),
      '#submit' => array('shredder_clear_results_table'),
    );
  }
  $form['warning'] = array(
    '#markup' => '<div class="messages error">' . t('All data from selected fields will be destroyed!') . '</div>',
  );
  $form['entity_type'] = array(
    '#type' => 'select',
    '#title' => t('Entity types'),
    '#options' => shredder_get_entity_types(),
    '#default_value' => !empty($form_state['object']['entity_type']) ? $form_state['object']['entity_type'] : '',
    '#multiple' => TRUE,
    '#required' => TRUE,
  );
  return $form;
}

/**
 * Select bundles.
 */
function shredder_step_2($form, &$form_state) {

  $form['bundles'] = array(
    '#type' => 'select',
    '#title' => t('Bundles'),
    '#options' => shredder_get_bundles($form_state),
    '#default_value' => !empty($form_state['object']['bundles']) ? $form_state['object']['bundles'] : '',
    '#multiple' => TRUE,
    '#required' => TRUE,
  );
  return $form;
}

/**
 * Select field types.
 */
function shredder_step_3($form, &$form_state) {

  $form['field_type'] = array(
    '#type' => 'select',
    '#title' => t('Field types'),
    '#options' => shredder_get_field_types(),
    '#default_value' => !empty($form_state['object']['field_type']) ? $form_state['object']['field_type'] : '',
    '#multiple' => TRUE,
    '#required' => TRUE,
  );
  return $form;
}

/**
 * Select fields.
 */
function shredder_step_4($form, &$form_state) {

  $form['fields'] = array(
    '#type' => 'select',
    '#title' => t('Fields'),
    '#options' => shredder_get_fields($form_state),
    '#default_value' => !empty($form_state['object']['fields']) ? $form_state['object']['fields'] : '',
    '#multiple' => TRUE,
    '#required' => TRUE,
  );
  return $form;
}

/**
 * Outputs warning page.
 */
function shredder_step_5($form, &$form_state) {
  $form['warning'] = array(
    '#markup' => '<div class="messages error">' . t('Are you sure you want to delete all data from selected fields?') . '</div>',
  );
  return $form;
}

/**
 * Runs butch process.
 */
function shredder_wizard_finish(&$form_state) {

  $entities = shredder_get_entities_to_change($form_state);
  $operations = array();
  foreach ($entities as $entity_type => $entity_ids) {
    foreach ($entity_ids as $id) {
      $operations[] = array('shredder_shredder_values', array($entity_type, $id));
    }
  }
  $batch = array(
    'operations' => $operations,
    'finished' => 'shredder_batch_finished',
  );
  batch_set($batch);
  batch_process('admin/config/content/shredder');
}

/**
 * Butch finish function.
 */
function shredder_batch_finished($success, $results, $operations) {
  if ($success) {
    $entity_count = format_plural($results, '1 entity', '@count entities');
    drupal_set_message('Successfully changed data for ' . $entity_count . '.');
  }
  else {
    drupal_set_message('Finished with errors.', 'error');
  }
}

/**
 *
 */
function shredder_clear_results_table($form, &$form_state) {
  db_truncate('shredder_changed_entities')->execute();
  drupal_set_message('Results table successfully cleared.');
  $form_state['redirect'] = array('admin/config/content/shredder');
}

/**
 * Returns array of entities what will be changed.
 */
function shredder_get_entities_to_change($form_state) {
  $supported_entity_properties = array(
    'title' => 'node',
    'name' => 'user',
    'mail' => 'user',
    'filename' => 'file',
    'subject' => 'comment',
  );
  $changed_entities = array();
  $result = db_select('shredder_changed_entities', 'sce')->fields('sce')->execute();
  if (!empty($result)) {
    foreach ($result as $entity) {
      $changed_entities[$entity->entity_type][$entity->entity_id] = $entity->entity_id;
    }
  }

  $entities = array();
  // Add entities for selected properties.
  $entity_info = entity_get_info();
  $not_changed_entity_types = $form_state['object']['entity_type'];
  $not_changed_bundles = $form_state['object']['bundles'];

  foreach ($supported_entity_properties as $entity_property => $entity_type) {
    if (array_key_exists($entity_property, $form_state['object']['fields']) && array_key_exists($entity_type, $not_changed_entity_types)) {

      if (shredder_is_entity_have_bundles($entity_info, $entity_type)) {
        foreach (array_keys($entity_info[$entity_type]['bundles']) as $bundle) {
          if (array_key_exists($bundle, $not_changed_bundles)) {
            shredder_add_entities_to_change($entities, $changed_entities, $entity_type, $bundle);
            unset($not_changed_bundles[$bundle]);
          }
        }
      }
      else {
        shredder_add_entities_to_change($entities, $changed_entities, $entity_type);
      }
      unset($not_changed_entity_types[$entity_type]);
    }
  }
  // Add entities for selected fields.
  foreach ($form_state['object']['fields'] as $field => $field_title) {
    if (!array_key_exists($field, $supported_entity_properties)) {

      $field_info = field_info_field($field);
      foreach ($field_info['bundles'] as $entity_type => $bundles) {
        if (array_key_exists($entity_type, $not_changed_entity_types)) {

          if (shredder_is_entity_have_bundles($entity_info, $entity_type)) {
            foreach ($bundles as $bundle) {
              if (array_key_exists($bundle, $not_changed_bundles)) {
                shredder_add_entities_to_change($entities, $changed_entities, $entity_type, $bundle, $field);
              }
            }
          }
          else {
            shredder_add_entities_to_change($entities, $changed_entities, $entity_type, NULL, $field);
          }
        }
      }
    }
  }
  return $entities;
}

/**
 * Adds entities to $entities array.
 */
function shredder_add_entities_to_change(&$entities, $changed_entities, $entity_type, $bundle = NULL, $field = NULL) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', $entity_type);
  if ($bundle) {
    $query->entityCondition('bundle', $bundle);
  }
  if ($field) {
    $query->fieldCondition($field, 'value', 'NULL', '!=');
  }
  $ids = $query->execute();
  if (!empty($ids)) {
    foreach ($ids[$entity_type] as $id => $entity) {
      if (empty($changed_entities[$entity_type][$id])) {
        $entities[$entity_type][$id] = $id;
      }
    }
  }
}

/**
 * Changes field's and entity property's values.
 */
function shredder_shredder_values($entity_type, $entity_id, &$context) {
  $supported_entity_properties = array(
    'title', 'name', 'mail', 'filename', 'subject',
  );
  // Loads entities with revisions.
  $entity_info = entity_get_info($entity_type);
  if (!empty($entity_info['revision table'])) {
    $query = db_select($entity_info['revision table'], 'revision');
    $query->fields('revision', array($entity_info['entity keys']['id'], $entity_info['entity keys']['revision']))
      ->condition('revision.' . $entity_info['entity keys']['id'], $entity_id);
    $revisions = $query
      ->execute()
      ->fetchAllAssoc($entity_info['entity keys']['revision']);

    $entities = array();
    foreach ($revisions as $key => $revision) {
      $entities[] = entity_revision_load($entity_type, $key);
    }
  }
  else {
    $entities = entity_load($entity_type, array($entity_id));
  }

  // Change fields and properties and save entity.
  foreach ($entities as $entity) {
    $object = shredder_cache_get('shredder');
    foreach (array_keys($object['fields']) as $field) {
      if (in_array($field, $supported_entity_properties)) {
        shredder_change_entity_property($entity, $field);
      }
      else {
        shredder_change_field($entity, $field);
      }
    }
    $entity->revision = 0;
    $entity->nodechanges_skip = TRUE; // For nodechanges module.
    if (!empty($entity->need_save)) {
      if ($entity_type == 'field_collection_item') {
        try {
          $entity->save(TRUE); // Workaround, field_collection_item revisions don't save from entity_save. TRUE for skip host.
          shredder_add_to_result_table($entity_type, $entity_id);
        } catch (Exception $e) {
          watchdog('shredder', t('Failed with field collection '. $entity_id));
        }
      }
      else {
        try {
          entity_save($entity_type, $entity);
          shredder_add_to_result_table($entity_type, $entity_id);
        } catch (Exception $e) {
          watchdog('shredder', t('Failed with '.$entity_type .' '. $entity_id));
        }
      }
      $context['message'] = "Changed data for <em>$entity_type</em> entity (id: <em>$entity_id</em>).";
      $context['results']++;
    }
  }
}

/**
 * Changes field's value.
 */
function shredder_change_field(&$entity, $field) {
  if (!empty($entity->{$field}[LANGUAGE_NONE])) {
    foreach ($entity->{$field}[LANGUAGE_NONE] as &$value) {
      $value['value'] = shredder_get_random_string(strlen($value['value']));
      if (!empty($value['summary'])) {
        $value['summary'] = shredder_get_random_string(strlen($value['summary']));
      }
    }
    $entity->need_save = TRUE;
  }
}

/**
 *
 */
function shredder_add_to_result_table($entity_type, $entity_id) {
  db_insert('shredder_changed_entities')
    ->fields(array(
      'entity_id' => $entity_id,
      'entity_type' => $entity_type,
    ))
    ->execute();
}

/**
 * Changes entity propertie's value.
 */
function shredder_change_entity_property(&$entity, $property) {
  if (!empty($entity->{$property})) {
    switch ($property) {
      case 'filename':
        $info = pathinfo($entity->{$property});
        $filename = basename($entity->{$property}, '.' . $info['extension']);
        $value = shredder_get_random_string(strlen($filename), FALSE) . '.' . $info['extension'];
        break;
      case 'mail':
        $value = 'user' . $entity->uid . '@' . shredder_get_random_string(4, FALSE) . '.' . shredder_get_random_string(3, FALSE);
        $entity->init = $value;
        break;
      case 'name':
        $value = 'user' . $entity->uid;
        break;
      default:
        $value = shredder_get_random_string(strlen($entity->{$property}));
        break;
    }
    $entity->{$property} = $value;
    $entity->need_save = TRUE;
  }
}

/**
 * Returns TRUE if entity can have bundles.
 */
function shredder_is_entity_have_bundles($entity_info, $entity_type) {
  //->entityCondition not support comment's bundles. see drupal.org/node/1343708.
  if (!empty($entity_info[$entity_type]['entity keys']['bundle']) && $entity_type != 'comment') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Returns entity types.
 */
function shredder_get_entity_types() {
  $entity_info = entity_get_info();
  $entity_types = array();
  foreach ($entity_info as $entity_name => $entity) {
    if (!empty($entity['bundles'])) {
      $entity_types[$entity_name] = $entity['label'];
    }
  }
  return $entity_types;
}

/**
 * Returns bundles.
 */
function shredder_get_bundles($form_state) {
  $options = array();
  if (!empty($form_state['object']['entity_type'])) {
    $field_info_bundles = field_info_bundles();
    foreach ($form_state['object']['entity_type'] as $entity_type) {
      foreach ($field_info_bundles[$entity_type] as $bundle_name => $bundle) {
        $options[$bundle_name] = $bundle['label'];
      }
    }
  }
  return $options;
}

/**
 * Returns field's types.
 */
function shredder_get_field_types() {
  $supported_field_types = array('text', 'text_long', 'text_with_summary');
  $field_types = field_info_field_types();
  $options = array();
  foreach ($supported_field_types as $field_type) {
    $options[$field_type] = $field_types[$field_type]['label'];
  }
  $options['entity_property'] = t('Entity property');
  return $options;
}

/**
* Returns fields.
*/
function shredder_get_fields($form_state) {
  $supported_entity_properties = array(
    'node' => array('title' => t('Node title')),
    'user' => array('name' => t('User name'), 'mail' => t('User email')),
    'file' => array('filename' => t('File name')),
    'comment' => array('subject' => t('Comment subject')),
  );

  $options = array();
  if (!empty($form_state['object']['entity_type'])) {

    // Add fields.
    foreach ($form_state['object']['bundles'] as $bundle) {
      $fields = field_read_fields(array('bundle' => $bundle));
      foreach ($fields as $field_name => $field) {
        if (in_array($field['type'], $form_state['object']['field_type'])) {
          $options[$field_name] = $field['field_name'];
        }
      }
    }
    // Add entity properties.
    if (in_array('entity_property', $form_state['object']['field_type'])) {
      foreach ($supported_entity_properties as $entity_type => $properties) {
        if (in_array($entity_type, $form_state['object']['entity_type'])) {
          foreach ($properties as $property => $property_title) {
            $options[$property] = $property_title;
          }
        }
      }
    }
  }
  return $options;
}



/**
 * Cache helpers.
 */
function shredder_cache_set($id, $object) {
  ctools_include('object-cache');
  ctools_object_cache_set('shredder', $id, $object);
}

/**
 * Get the current object from the cache, or default.
 */
function shredder_cache_get($id) {
  ctools_include('object-cache');
  return ctools_object_cache_get('shredder', $id);
}

/**
 * Clear the wizard cache.
 */
function shredder_cache_clear($id) {
  ctools_include('object-cache');
  ctools_object_cache_clear('shredder', $id);
}

/**
 * Callback for continue button.
 */
function shredder_wizard_next(&$form_state) {
  if (empty($form_state['object'])) {
    $form_state['object'] = $form_state['values'];
  }
  $form_state['object'] = $form_state['values'] + $form_state['object'];

  shredder_cache_set($form_state['object_id'], $form_state['object']);
}

/**
 * Returns random string.
 *
 * @param $length
 *   Length of returned string.
 * @param $with_space
 *   Includes spaces if TRUE.
 *
 * @return
 *   Random string.
 */
function shredder_get_random_string($length = 10, $with_space = TRUE) {
  $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
  if ($with_space) {
    $characters .= ' ';
  }
  $randomString = '';
  for ($i = 0; $i < $length; $i++) {
    $randomString .= $characters[rand(0, strlen($characters) - 1)];
  }
  return $randomString;
}